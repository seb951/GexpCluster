rownames(data2) = data[,1]
data2[1:4,1:$]
data2[1:4,1:3]
rownames(data2)
rownames(data2) = data[,1]
data[,1]
c(data[,1])
rownames(data2) = c(data[,1])
row.names(data2) = c(data[,1])
str(data)
data = as.matrix(read_excel("~/Downloads/Patient distance matrix-GI+allsysWOClinic.xlsx"))
data[1:5,1:5]
x = data[1:5,1:5]
rownames(x)
rownames(x) = 1:5
rownames(x)
x
rownames(x) = x[,1]
x
x= x[,-1]
x
data = as.matrix(read_excel("~/Downloads/Patient distance matrix-GI+allsysWOClinic.xlsx"))
rownames(data) = data[,1]
data= data[,-1]
hclust(data)
data[1:5,1:5]
str(data[1:5,1:5])
heatmap(data[1:5,1:5])
heatmap(data)
451*451
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=25) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
str(cl)
tmp
as.dist(tmp)
heatmap(as.dist(data))
heatmap((data))
as.dist(data)
x = as.dist(data)
?heatmap
?heatmap2
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=25) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
sil_cl
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=25) ,as.dist(data), title=title(main = 'Good'))
sil_col
sil_cl
?cutree
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=2) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
sil_cl
str(sil_cl)
head(sil_cl)
head(sil_cl$cluster)
head(sil_cl[,1])
rle(sort(sil_cl[,1]))
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(data), title=title(main = 'Good'))
rle(sort(sil_cl[,1]))
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=10) ,as.dist(data), title=title(main = 'Good'))
rle(sort(sil_cl[,1]))
head(sil_cl)
rle(sort(sil_cl[,2]))
plot(cl)
?cut.dendrogram
?cutree
#cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
cut <- cutree(cl, k=10))
#cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
cut <- cutree(cl, k=10)
cut
#cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
cut <- cutree(cl, k=50)
str(cut)
rle(sort(cut)))
rle(sort(cut))
rle(sort(cut))
head(cut)
hist(cut)
cl
str(cl)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=25) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
sil_cl
cl
str(cl)
str(cl$height)
sort(cl$height)
rle(sort(cl$height))
str(cl)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=19) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=21) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=39) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=41) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
heatmap(tmp)
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
cl <- hclust(as.dist(tmp,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(tmp), title=title(main = 'Good'))
plot(sil_cl)
sil_cl
cl
plot(cl)
plot(cl)
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
plot(cl)
?heatmap
?hclust
# run hierarchical clustering
if(!require("cluster")) { install.packages("cluster");  require("cluster") }
tmp <- matrix(c( 0,  20,  20,  20,  40,  60,  60,  60, 100, 120, 120, 120,
20,   0,  30,  50,  60,  80,  40,  80, 120, 100, 140, 120,
20,  30,   0,  40,  60,  80,  80,  80, 120, 140, 140,  80,
20,  50,  40,   0,  60,  80,  80,  80, 120, 140, 140, 140,
40,  60,  60,  60,   0,  20,  20,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,   0,  20,  20,  40,  60,  60,  60,
60,  40,  80,  80,  20,  20,   0,  20,  60,  80,  80,  80,
60,  80,  80,  80,  20,  20,  20,   0,  60,  80,  80,  80,
100, 120, 120, 120,  60,  40,  60,  60,   0,  20,  20,  20,
120, 100, 140, 140,  80,  60,  80,  80,  20,   0,  20,  20,
120, 140, 140, 140,  80,  60,  80,  80,  20,  20,   0,  20,
120, 120,  80, 140,  80,  60,  80,  80,  20,  20,  20,   0),
nr=12, dimnames=list(LETTERS[1:12], LETTERS[1:12]))
as.dist(tmp)
?heatmap
heatmap(data,method = "euclidean")
heatmap(data,distfun =dist("euclidean"))
heatmap(data,distfun = dist(method = "euclidean"))
data
heatmap(data)
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'euclidean')
?hclust
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
plot(cl)
?heatmap
heatmap(data,distfun = dist(data, method = "euclidean"))
heatmap(data,distfun = dist)
heatmap(data,distfun =
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'complete')dist)
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'complete')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
sil_cl
sil_cl[,1]
rle(sort(sil_cl[,1]))
sil_cl <- silhouette(cutree(cl, k=9) ,as.dist(data), title=title(main = 'Good'))
rle(sort(sil_cl[,1]))
sil_cl <- silhouette(cutree(cl, k=5) ,as.dist(data), title=title(main = 'Good'))
rle(sort(sil_cl[,1]))
heatmap.2(data)
heatmap(data,distfun = function(x) dist(x,method = 'euclidean'))
heatmap(data,distfun = function(x) dist(x,method = 'complete'))
heatmap(data,distfun = function(x) dist(x,method = 'maximum'))
heatmap(data,distfun = function(x) dist(x,method = 'euclidean'))
?hclust
library(gplots)
install.packages("gplots")
library(gplots)
?heatmap.2()
hclust(
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'complete')
plot(cl))
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'complete')
plot(cl)
?hclust
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
plot(cl)
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE))
plot(cl)
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE))
plot(as.dend(cl))
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE))
plot(as.dendrogram(cl))
x
dend <- as.dendrogram(hclust(as.dist(data,diag = TRUE, upper = TRUE), method = "ave"))
plot(cl)
plot(dend)
?as.dendrogram
cutree(dend)
dend <- as.dendrogram(cl, method = "ave"))
dend <- as.dendrogram(cl, method = "ave")
cutree(dend)
cutree(dend, k = 3)[order.dendrogram(dend)]
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(tmp), title=title(main = 'Good'))
data = as.matrix(read_excel("~/Downloads/Patient distance matrix-GI+allsysWOClinic.xlsx"))
rownames(data) = data[,1]
data= data[,-1]
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, h=25) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
# run hierarchical clustering
cl <- hclust(as.dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
rle(sort(sil_cl[,1]))
toto = heatmap(data)
toto
str(toto)
?heatmap
xx = hclust(dist(data))
plot(xx)
cl <- hclust(dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,as.dist(data), title=title(main = 'Good'))
plot(sil_cl)
cl <- hclust(dist(data,diag = TRUE, upper = TRUE), method= 'single')
sil_cl <- silhouette(cutree(cl, k=3) ,dist(data), title=title(main = 'Good'))
plot(sil_cl)
rle(sort(sil_cl[,1]))
plot(sil_cl)
sil_cl
rle(sort(sil_cl[,1]))
sil_cl <- silhouette(cutree(cl, k=5) ,dist(data), title=title(main = 'Good'))
plot(sil_cl)
rle(sort(sil_cl[,1]))
?hclust
cl <- hclust(dist(data,diag = TRUE, upper = TRUE))
sil_cl <- silhouette(cutree(cl, k=5) ,dist(data), title=title(main = 'Good'))
plot(sil_cl)
rle(sort(sil_cl[,1]))
cl <- hclust(dist(data,diag = TRUE, upper = TRUE))
sil_cl <- silhouette(cutree(cl, k=10) ,dist(data), title=title(main = 'Good'))
plot(sil_cl)
rle(sort(sil_cl[,1]))
?heatmap
toto = heatmap(data,distfun = function(x) dist(x,method = 'euclidean'),
hclustfun = function(x) hclust(x))
toto = heatmap(data,distfun = as.dist(data),
hclustfun = function(x) hclust(x))
toto = heatmap(data,distfun = function(x) as.dist(x),
hclustfun = function(x) hclust(x))
tmp
dist(tmp)
try(x=2)
name <- function(v=2) {v+1}
} = fun(x=1){x+1}
name  = fun(x=1){x+1}
name = fun(x=1){x+1}
name = function(v=2){v+1}
name(3)
try(name(3))
try(name("e"))
c = try(name("e"))
c = try(name("e"),silent= T)
c
c = (name("e"))
c
d = (name("e"))
d
d = try(name("e"))
d = try(name("e"),silent = T)
d
d = try(name(1),silent = T)
d
shiny::runApp('Documents/git_repos/shiny_examples/cluster')
runApp('Documents/git_repos/shiny_examples/cluster')
plot(input_pca_data.pca$x[,pcX],input_pca_data.pca$x[,pcY],xlab = paste0("PC",pcX," (",pve[pcX]," %)"),ylab =paste0("PC",pcY," (",pve[pcY]," %)"),col=colors_val,pch=19,lwd=3,main = paste0("Principal Component Analysis \n (grouping according to ",type,",)"))
shiny::runApp('Documents/git_repos/shiny_examples/cluster')
install.packages("golem")
library(golem)
golem::create_golem()
golem::create_golem("~/Desktop/toto")
golem::create_golem("~/Desktop/toto/test")
getwd()
source("~/Documents/git_repos/shiny_examples/cluster/R/clustering.R")
library(golem)
golem::create_golem('~/Desktop/clustering_app')
golem::create_golem('~/Desktop/Gexpr_cluster')
golem::create_golem('~/Desktop/GexprCluster')
data = matrix(rnorm(100),20,5)
data
apply(data,2,mean)
apply(data,1,mean)
apply(data,1,sd)
lapply(data,1,sd)
?apply
sapply(data,1,sd)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
sapply(x, quantile)
library(DT)
DT:data()
?DT::datatable()
?renderDataTable
library(shiny)
?renderDataTable
GexpCluster::run_app()
library(golem)
library(golem)
GexpCluster::run_app()
run_app()
run_dev()
getwd()
setwd('Desktop/GexpCluster/')
run_dev()
run_dev()
library(golem)
run_dev()
?dataTableOutput
version(shiny)
installed.packages()
installed.packages("shiny")
installed.packages(shiny)
in = installed.packages()
tta = installed.packages()
tta
dim(tta)
tta[rownames(tta) == 'shiny',]
tta[rownames(tta) == 'DT',]
run_dev()
library(golem)
run_dev()
library(golem)
run_dev()
golem::add_shinyappsio_file()
rsconnect::deployApp()
attachment::att_amend_desc()
install.packages("attachment")
attachment::att_amend_desc()
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpr", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
Version = 0.0.1)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
Version = 0.0.1)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL, # The URL of the GitHub Repo (optional)
Version = 0.0.1)
golem::fill_desc(
pkg_name = "GexpCluster", # The Name of the package containing the App
pkg_title = "Gene Expression Clustering", # The Title of the package containing the App
pkg_description = "Cluster Gexpression. Also use clinical data. Shiny app.", # The Description of the package containing the App
author_first_name = "Sebastien", # Your First Name
author_last_name = "Renaut", # Your Last Name
author_email = "sebastien.renaut@gmail.com", # Your Email
repo_url = NULL, # The URL of the GitHub Repo (optional)
version = 0.0.1)
?fill_desc
golem::add_shinyappsio_file()
library(wesanderson)
rsconnect::deployApp()
